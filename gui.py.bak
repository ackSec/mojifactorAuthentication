import tkinter as tk
from tkinter import messagebox
import authenticateFace as af
import common.emojiGenerator as eg
from modules.frameCapture import runner
from urllib.request import urlopen
import time


def get_insult():
    url = "https://evilinsult.com/generate_insult.php"
    try:
        response = urlopen(url)
        return response.read().decode()
    except Exception as e:
        return "An error occurred while fetching insult: " + str(e)


def run_authenticate():
    result = af.runner()
    if result:
        authenticate_status_label.config(text="Authentication successful.")
    else:
        authenticate_status_label.config(text="Authentication failed. Please try again.")
    generate_emoji_button.config(state="normal")
    authenticate_button.config(fg="white")


def run_generate_emoji():
    global random_emoji
    random_emoji = eg.generate_random_emoji()
    emoji_label.config(text=f"Please make this face to authenticate yourself: {random_emoji}")
    detect_emotion_button.config(state="normal")
    generate_emoji_button.config(fg="white")


def update_countdown_label(countdown):
    if countdown > 0:
        status_label.config(text=f"Time remaining: {countdown}s")
        window.after(1000, update_countdown_label, countdown - 1)
    else:
        run_detect_emotion_after_countdown()


def run_detect_emotion():
    countdown_duration = 5  # set the duration of the countdown in seconds
    update_countdown_label(countdown_duration)


def run_detect_emotion_after_countdown():
    detected_emotion = runner()
    if detected_emotion is None:
        messagebox.showerror("Error", "No face detected, please try again")
    elif eg.emoji_map[detected_emotion] == random_emoji:
        status_label.config(text="Fully authenticated - Thank you!")
        detect_emotion_button.config(fg="black")
    else:
        insult = get_insult()
        status_label.config(text=insult)
        detect_emotion_button.config(fg="black")

# Create the main window
window = tk.Tk()
window.title("Mojifactor Authentication")
window.geometry("500x400")
window.resizable(False, False)

# Set window position
window.eval('tk::PlaceWindow %s center' % window.winfo_pathname(window.winfo_id()))

# Set dark mode theme
window.tk_setPalette(background='#2c2c2c', foreground='white', activeBackground='#0078d7', activeForeground='white')

# Create the frames
authenticate_frame = tk.Frame(window)
generate_emoji_frame = tk.Frame(window)
detect_emotion_frame = tk.Frame(window)

# Create the widgets
authenticate_button = tk.Button(authenticate_frame, text="Authenticate", command=run_authenticate, height=2, width=15, font=("Helvetica", 14), bd=0, highlightthickness=0, fg="black")
authenticate_status_label = tk.Label(authenticate_frame, text="", font=("Helvetica", 12), fg="white")

generate_emoji_button = tk.Button(generate_emoji_frame, text="Generate Emoji", command=run_generate_emoji, height=2, width=15, font=("Helvetica", 14), bd=0, highlightthickness=0, state="disabled", fg="white")
emoji_label = tk.Label(generate_emoji_frame, text="", font=("Helvetica", 12), fg="white")

detect_emotion_button = tk.Button(detect_emotion_frame, text="Detect Emotion", command=run_detect_emotion, height=2, width=15, font=("Helvetica", 14), bd=0, highlightthickness=0, state="disabled", fg="black")
status_label = tk.Label(detect_emotion_frame, text="", font=("Helvetica", 12), fg="white")


# Add the widgets to the frames
authenticate_button.pack()
authenticate_status_label.pack()
generate_emoji_button.pack()
emoji_label.pack()
detect_emotion_button.pack()
status_label.pack()

# Add the frames to the window
authenticate_frame.pack(pady=5)
generate_emoji_frame.pack(pady=5)
detect_emotion_frame.pack(pady=5)

# Run the window
window.mainloop()
